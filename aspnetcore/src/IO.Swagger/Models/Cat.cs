/*
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Cat :  IEquatable<Cat>
    { 
        /// <summary>
        /// Gets or Sets BaseInfo
        /// </summary>
        [Required]
        [DataMember(Name="baseInfo")]
        public BaseAnimalInfo BaseInfo { get; set; }
        /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        public enum CatBreeds
        { 
            /// <summary>
            /// Enum UndeterminedEnum for "Undetermined"
            /// </summary>
            [EnumMember(Value = "Undetermined")]
            UndeterminedEnum = 1,
            
            /// <summary>
            /// Enum AbyssinianEnum for "Abyssinian"
            /// </summary>
            [EnumMember(Value = "Abyssinian")]
            AbyssinianEnum = 2,
            
            /// <summary>
            /// Enum AmericanCurlEnum for "American Curl"
            /// </summary>
            [EnumMember(Value = "American Curl")]
            AmericanCurlEnum = 3,
            
            /// <summary>
            /// Enum BengalEnum for "Bengal"
            /// </summary>
            [EnumMember(Value = "Bengal")]
            BengalEnum = 4,
            
            /// <summary>
            /// Enum DomesticLonghairEnum for "Domestic Longhair"
            /// </summary>
            [EnumMember(Value = "Domestic Longhair")]
            DomesticLonghairEnum = 5,
            
            /// <summary>
            /// Enum DomesticMediumhairEnum for "Domestic Mediumhair"
            /// </summary>
            [EnumMember(Value = "Domestic Mediumhair")]
            DomesticMediumhairEnum = 6,
            
            /// <summary>
            /// Enum DomesticShorthairEnum for "Domestic Shorthair"
            /// </summary>
            [EnumMember(Value = "Domestic Shorthair")]
            DomesticShorthairEnum = 7,
            
            /// <summary>
            /// Enum HimalayanEnum for "Himalayan"
            /// </summary>
            [EnumMember(Value = "Himalayan")]
            HimalayanEnum = 8,
            
            /// <summary>
            /// Enum MaineCoonEnum for "Maine Coon"
            /// </summary>
            [EnumMember(Value = "Maine Coon")]
            MaineCoonEnum = 9,
            
            /// <summary>
            /// Enum ManxEnum for "Manx"
            /// </summary>
            [EnumMember(Value = "Manx")]
            ManxEnum = 10,
            
            /// <summary>
            /// Enum PersianEnum for "Persian"
            /// </summary>
            [EnumMember(Value = "Persian")]
            PersianEnum = 11,
            
            /// <summary>
            /// Enum RagaMuffinEnum for "RagaMuffin"
            /// </summary>
            [EnumMember(Value = "RagaMuffin")]
            RagaMuffinEnum = 12,
            
            /// <summary>
            /// Enum RagdollEnum for "Ragdoll"
            /// </summary>
            [EnumMember(Value = "Ragdoll")]
            RagdollEnum = 13,
            
            /// <summary>
            /// Enum RussianBlueEnum for "Russian Blue"
            /// </summary>
            [EnumMember(Value = "Russian Blue")]
            RussianBlueEnum = 14,
            
            /// <summary>
            /// Enum FoldEnum for "Fold"
            /// </summary>
            [EnumMember(Value = "Fold")]
            FoldEnum = 15,
            
            /// <summary>
            /// Enum SiameseEnum for "Siamese"
            /// </summary>
            [EnumMember(Value = "Siamese")]
            SiameseEnum = 16,
            
            /// <summary>
            /// Enum SnowshoeEnum for "Snowshoe"
            /// </summary>
            [EnumMember(Value = "Snowshoe")]
            SnowshoeEnum = 17,
            
            /// <summary>
            /// Enum SphynxEnum for "Sphynx"
            /// </summary>
            [EnumMember(Value = "Sphynx")]
            SphynxEnum = 18
        }

        /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        [Required]
        [DataMember(Name="breed")]
        public CatBreeds? Breed { get; set; }
        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        public enum CatColors
        { 
            /// <summary>
            /// Enum WhiteEnum for "White"
            /// </summary>
            [EnumMember(Value = "White")]
            WhiteEnum = 1,
            
            /// <summary>
            /// Enum BlackEnum for "Black"
            /// </summary>
            [EnumMember(Value = "Black")]
            BlackEnum = 2,
            
            /// <summary>
            /// Enum BlackAndWhiteEnum for "Black and White"
            /// </summary>
            [EnumMember(Value = "Black and White")]
            BlackAndWhiteEnum = 3,
            
            /// <summary>
            /// Enum OrangeTabbyEnum for "Orange Tabby"
            /// </summary>
            [EnumMember(Value = "Orange Tabby")]
            OrangeTabbyEnum = 4,
            
            /// <summary>
            /// Enum OrangeAndWhiteEnum for "Orange and White"
            /// </summary>
            [EnumMember(Value = "Orange and White")]
            OrangeAndWhiteEnum = 5,
            
            /// <summary>
            /// Enum BrownEnum for "Brown"
            /// </summary>
            [EnumMember(Value = "Brown")]
            BrownEnum = 6,
            
            /// <summary>
            /// Enum BrownTabbyEnum for "Brown Tabby"
            /// </summary>
            [EnumMember(Value = "Brown Tabby")]
            BrownTabbyEnum = 7,
            
            /// <summary>
            /// Enum BrownAndWhiteEnum for "Brown and White"
            /// </summary>
            [EnumMember(Value = "Brown and White")]
            BrownAndWhiteEnum = 8,
            
            /// <summary>
            /// Enum GrayEnum for "Gray"
            /// </summary>
            [EnumMember(Value = "Gray")]
            GrayEnum = 9,
            
            /// <summary>
            /// Enum GrayAndWhiteEnum for "Gray and White"
            /// </summary>
            [EnumMember(Value = "Gray and White")]
            GrayAndWhiteEnum = 10,
            
            /// <summary>
            /// Enum GrayTabbyEnum for "Gray Tabby"
            /// </summary>
            [EnumMember(Value = "Gray Tabby")]
            GrayTabbyEnum = 11,
            
            /// <summary>
            /// Enum SilverEnum for "Silver"
            /// </summary>
            [EnumMember(Value = "Silver")]
            SilverEnum = 12,
            
            /// <summary>
            /// Enum SilverAndWhiteEnum for "Silver and White"
            /// </summary>
            [EnumMember(Value = "Silver and White")]
            SilverAndWhiteEnum = 13,
            
            /// <summary>
            /// Enum SilverTabbyEnum for "Silver Tabby"
            /// </summary>
            [EnumMember(Value = "Silver Tabby")]
            SilverTabbyEnum = 14,
            
            /// <summary>
            /// Enum BuffEnum for "Buff"
            /// </summary>
            [EnumMember(Value = "Buff")]
            BuffEnum = 15,
            
            /// <summary>
            /// Enum BuffAndWhiteEnum for "Buff and White"
            /// </summary>
            [EnumMember(Value = "Buff and White")]
            BuffAndWhiteEnum = 16,
            
            /// <summary>
            /// Enum BuffTabbyEnum for "Buff Tabby"
            /// </summary>
            [EnumMember(Value = "Buff Tabby")]
            BuffTabbyEnum = 17,
            
            /// <summary>
            /// Enum SealPointEnum for "Seal Point"
            /// </summary>
            [EnumMember(Value = "Seal Point")]
            SealPointEnum = 18,
            
            /// <summary>
            /// Enum FlamePointEnum for "Flame Point"
            /// </summary>
            [EnumMember(Value = "Flame Point")]
            FlamePointEnum = 19,
            
            /// <summary>
            /// Enum LavendarLilacPointEnum for "Lavendar/Lilac Point"
            /// </summary>
            [EnumMember(Value = "Lavendar/Lilac Point")]
            LavendarLilacPointEnum = 20,
            
            /// <summary>
            /// Enum SnowshoeEnum for "Snowshoe"
            /// </summary>
            [EnumMember(Value = "Snowshoe")]
            SnowshoeEnum = 21,
            
            /// <summary>
            /// Enum CalicoEnum for "Calico"
            /// </summary>
            [EnumMember(Value = "Calico")]
            CalicoEnum = 22,
            
            /// <summary>
            /// Enum TortieEnum for "Tortie"
            /// </summary>
            [EnumMember(Value = "Tortie")]
            TortieEnum = 23,
            
            /// <summary>
            /// Enum DiluteCalicoEnum for "Dilute Calico"
            /// </summary>
            [EnumMember(Value = "Dilute Calico")]
            DiluteCalicoEnum = 24
        }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [Required]
        [DataMember(Name="color")]
        public CatColors? Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cat {\n");
            sb.Append("  BaseInfo: ").Append(BaseInfo).Append("\n");
            sb.Append("  Breed: ").Append(Breed).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Cat)obj);
        }

        /// <summary>
        /// Returns true if Cat instances are equal
        /// </summary>
        /// <param name="other">Instance of Cat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cat other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BaseInfo == other.BaseInfo ||
                    BaseInfo != null &&
                    BaseInfo.Equals(other.BaseInfo)
                ) && 
                (
                    Breed == other.Breed ||
                    Breed != null &&
                    Breed.Equals(other.Breed)
                ) && 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BaseInfo != null)
                    hashCode = hashCode * 59 + BaseInfo.GetHashCode();
                    if (Breed != null)
                    hashCode = hashCode * 59 + Breed.GetHashCode();
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Cat left, Cat right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cat left, Cat right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
