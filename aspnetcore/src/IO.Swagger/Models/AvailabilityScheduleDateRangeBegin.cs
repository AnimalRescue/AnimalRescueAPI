/*
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AvailabilityScheduleDateRangeBegin :  IEquatable<AvailabilityScheduleDateRangeBegin>
    {         /// <summary>
        /// Gets or Sets Month
        /// </summary>
        public enum MonthSelect
        { 
            /// <summary>
            /// Enum JanuaryEnum for "January"
            /// </summary>
            [EnumMember(Value = "January")]
            JanuaryEnum = 1,
            
            /// <summary>
            /// Enum FebruaryEnum for "February"
            /// </summary>
            [EnumMember(Value = "February")]
            FebruaryEnum = 2,
            
            /// <summary>
            /// Enum MarchEnum for "March"
            /// </summary>
            [EnumMember(Value = "March")]
            MarchEnum = 3,
            
            /// <summary>
            /// Enum AprilEnum for "April"
            /// </summary>
            [EnumMember(Value = "April")]
            AprilEnum = 4,
            
            /// <summary>
            /// Enum MayEnum for "May"
            /// </summary>
            [EnumMember(Value = "May")]
            MayEnum = 5,
            
            /// <summary>
            /// Enum JuneEnum for "June"
            /// </summary>
            [EnumMember(Value = "June")]
            JuneEnum = 6,
            
            /// <summary>
            /// Enum JulyEnum for "July"
            /// </summary>
            [EnumMember(Value = "July")]
            JulyEnum = 7,
            
            /// <summary>
            /// Enum AugustEnum for "August"
            /// </summary>
            [EnumMember(Value = "August")]
            AugustEnum = 8,
            
            /// <summary>
            /// Enum SeptemberEnum for "September"
            /// </summary>
            [EnumMember(Value = "September")]
            SeptemberEnum = 9,
            
            /// <summary>
            /// Enum OctoberEnum for "October"
            /// </summary>
            [EnumMember(Value = "October")]
            OctoberEnum = 10,
            
            /// <summary>
            /// Enum NovemberEnum for "November"
            /// </summary>
            [EnumMember(Value = "November")]
            NovemberEnum = 11,
            
            /// <summary>
            /// Enum DecemberEnum for "December"
            /// </summary>
            [EnumMember(Value = "December")]
            DecemberEnum = 12
        }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month")]
        public MonthSelect? Month { get; set; }

        /// <summary>
        /// Gets or Sets DayOfMonth
        /// </summary>
        [DataMember(Name="dayOfMonth")]
        public DefinitionsDayOfMonthSelect DayOfMonth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailabilityScheduleDateRangeBegin {\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  DayOfMonth: ").Append(DayOfMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AvailabilityScheduleDateRangeBegin)obj);
        }

        /// <summary>
        /// Returns true if AvailabilityScheduleDateRangeBegin instances are equal
        /// </summary>
        /// <param name="other">Instance of AvailabilityScheduleDateRangeBegin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilityScheduleDateRangeBegin other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Month == other.Month ||
                    Month != null &&
                    Month.Equals(other.Month)
                ) && 
                (
                    DayOfMonth == other.DayOfMonth ||
                    DayOfMonth != null &&
                    DayOfMonth.Equals(other.DayOfMonth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Month != null)
                    hashCode = hashCode * 59 + Month.GetHashCode();
                    if (DayOfMonth != null)
                    hashCode = hashCode * 59 + DayOfMonth.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AvailabilityScheduleDateRangeBegin left, AvailabilityScheduleDateRangeBegin right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AvailabilityScheduleDateRangeBegin left, AvailabilityScheduleDateRangeBegin right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
