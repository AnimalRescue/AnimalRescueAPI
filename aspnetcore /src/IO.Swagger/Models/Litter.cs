/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Litter :  IEquatable<Litter>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        public LitterId Id { get; set; }

        /// <summary>
        /// Gets or Sets IsMotherIncluded
        /// </summary>
        [Required]
        [DataMember(Name="isMotherIncluded")]
        public bool? IsMotherIncluded { get; set; }

        /// <summary>
        /// Gets or Sets Mother
        /// </summary>
        [DataMember(Name="mother")]
        public AnimalId Mother { get; set; }

        /// <summary>
        /// Gets or Sets Littermates
        /// </summary>
        [Required]
        [DataMember(Name="littermates")]
        public List<AnimalId> Littermates { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes")]
        public List<NoteId> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Litter {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsMotherIncluded: ").Append(IsMotherIncluded).Append("\n");
            sb.Append("  Mother: ").Append(Mother).Append("\n");
            sb.Append("  Littermates: ").Append(Littermates).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Litter)obj);
        }

        /// <summary>
        /// Returns true if Litter instances are equal
        /// </summary>
        /// <param name="other">Instance of Litter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Litter other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsMotherIncluded == other.IsMotherIncluded ||
                    IsMotherIncluded != null &&
                    IsMotherIncluded.Equals(other.IsMotherIncluded)
                ) && 
                (
                    Mother == other.Mother ||
                    Mother != null &&
                    Mother.Equals(other.Mother)
                ) && 
                (
                    Littermates == other.Littermates ||
                    Littermates != null &&
                    Littermates.SequenceEqual(other.Littermates)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsMotherIncluded != null)
                    hashCode = hashCode * 59 + IsMotherIncluded.GetHashCode();
                    if (Mother != null)
                    hashCode = hashCode * 59 + Mother.GetHashCode();
                    if (Littermates != null)
                    hashCode = hashCode * 59 + Littermates.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Litter left, Litter right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Litter left, Litter right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
