/*
 * Animal Rescue API
 *
 * AnimalRescue CQRS API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AnimalInfo :  IEquatable<AnimalInfo>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        public AnimalId Id { get; set; }

        /// <summary>
        /// Gets or Sets ParNumber
        /// </summary>
        [Required]
        [DataMember(Name="parNumber")]
        public ParNumber ParNumber { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        public enum AdoptionStatus
        { 
            /// <summary>
            /// Enum AdoptionPendingEnum for "Adoption Pending"
            /// </summary>
            [EnumMember(Value = "Adoption Pending")]
            AdoptionPendingEnum = 1,
            
            /// <summary>
            /// Enum AvailableEnum for "Available"
            /// </summary>
            [EnumMember(Value = "Available")]
            AvailableEnum = 2,
            
            /// <summary>
            /// Enum AvailablePendingSpayNeuterEnum for "Available Pending Spay/Neuter"
            /// </summary>
            [EnumMember(Value = "Available Pending Spay/Neuter")]
            AvailablePendingSpayNeuterEnum = 3,
            
            /// <summary>
            /// Enum MedicalHoldEnum for "Medical Hold"
            /// </summary>
            [EnumMember(Value = "Medical Hold")]
            MedicalHoldEnum = 4,
            
            /// <summary>
            /// Enum PendingIntakeTestingEnum for "Pending Intake Testing"
            /// </summary>
            [EnumMember(Value = "Pending Intake Testing")]
            PendingIntakeTestingEnum = 5
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status")]
        public AdoptionStatus? Status { get; set; }
        /// <summary>
        /// Gets or Sets AnimalType
        /// </summary>
        public enum AnimalType
        { 
            /// <summary>
            /// Enum CatEnum for "Cat"
            /// </summary>
            [EnumMember(Value = "Cat")]
            CatEnum = 1,
            
            /// <summary>
            /// Enum DogEnum for "Dog"
            /// </summary>
            [EnumMember(Value = "Dog")]
            DogEnum = 2
        }

        /// <summary>
        /// Gets or Sets AnimalType
        /// </summary>
        [Required]
        [DataMember(Name="animalType")]
        public AnimalType? AnimalType { get; set; }
        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        public enum Gender
        { 
            /// <summary>
            /// Enum MaleEnum for "Male"
            /// </summary>
            [EnumMember(Value = "Male")]
            MaleEnum = 1,
            
            /// <summary>
            /// Enum FemaleEnum for "Female"
            /// </summary>
            [EnumMember(Value = "Female")]
            FemaleEnum = 2,
            
            /// <summary>
            /// Enum UndeterminedEnum for "Undetermined"
            /// </summary>
            [EnumMember(Value = "Undetermined")]
            UndeterminedEnum = 3
        }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [Required]
        [DataMember(Name="gender")]
        public Gender? Gender { get; set; }

        /// <summary>
        /// Gets or Sets AgeIsEstimated
        /// </summary>
        [Required]
        [DataMember(Name="ageIsEstimated")]
        public bool? AgeIsEstimated { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="age")]
        public string Age { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth")]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets IsPartOfLitter
        /// </summary>
        [Required]
        [DataMember(Name="isPartOfLitter")]
        public bool? IsPartOfLitter { get; set; }

        /// <summary>
        /// Gets or Sets LitterId
        /// </summary>
        [DataMember(Name="litterId")]
        public LitterId LitterId { get; set; }

        /// <summary>
        /// Gets or Sets MedicalHistoryId
        /// </summary>
        [DataMember(Name="medicalHistoryId")]
        public MedicalHistoryId MedicalHistoryId { get; set; }

        /// <summary>
        /// Gets or Sets KennelId
        /// </summary>
        [DataMember(Name="kennelId")]
        public KennelId KennelId { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [DataMember(Name="bio")]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets Photos
        /// </summary>
        [DataMember(Name="photos")]
        public PhotoId Photos { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes")]
        public List<NoteId> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnimalInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParNumber: ").Append(ParNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AnimalType: ").Append(AnimalType).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  AgeIsEstimated: ").Append(AgeIsEstimated).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  IsPartOfLitter: ").Append(IsPartOfLitter).Append("\n");
            sb.Append("  LitterId: ").Append(LitterId).Append("\n");
            sb.Append("  MedicalHistoryId: ").Append(MedicalHistoryId).Append("\n");
            sb.Append("  KennelId: ").Append(KennelId).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  Photos: ").Append(Photos).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AnimalInfo)obj);
        }

        /// <summary>
        /// Returns true if AnimalInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of AnimalInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnimalInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ParNumber == other.ParNumber ||
                    ParNumber != null &&
                    ParNumber.Equals(other.ParNumber)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    AnimalType == other.AnimalType ||
                    AnimalType != null &&
                    AnimalType.Equals(other.AnimalType)
                ) && 
                (
                    Gender == other.Gender ||
                    Gender != null &&
                    Gender.Equals(other.Gender)
                ) && 
                (
                    AgeIsEstimated == other.AgeIsEstimated ||
                    AgeIsEstimated != null &&
                    AgeIsEstimated.Equals(other.AgeIsEstimated)
                ) && 
                (
                    Age == other.Age ||
                    Age != null &&
                    Age.Equals(other.Age)
                ) && 
                (
                    DateOfBirth == other.DateOfBirth ||
                    DateOfBirth != null &&
                    DateOfBirth.Equals(other.DateOfBirth)
                ) && 
                (
                    IsPartOfLitter == other.IsPartOfLitter ||
                    IsPartOfLitter != null &&
                    IsPartOfLitter.Equals(other.IsPartOfLitter)
                ) && 
                (
                    LitterId == other.LitterId ||
                    LitterId != null &&
                    LitterId.Equals(other.LitterId)
                ) && 
                (
                    MedicalHistoryId == other.MedicalHistoryId ||
                    MedicalHistoryId != null &&
                    MedicalHistoryId.Equals(other.MedicalHistoryId)
                ) && 
                (
                    KennelId == other.KennelId ||
                    KennelId != null &&
                    KennelId.Equals(other.KennelId)
                ) && 
                (
                    Bio == other.Bio ||
                    Bio != null &&
                    Bio.Equals(other.Bio)
                ) && 
                (
                    Photos == other.Photos ||
                    Photos != null &&
                    Photos.Equals(other.Photos)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ParNumber != null)
                    hashCode = hashCode * 59 + ParNumber.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (AnimalType != null)
                    hashCode = hashCode * 59 + AnimalType.GetHashCode();
                    if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (AgeIsEstimated != null)
                    hashCode = hashCode * 59 + AgeIsEstimated.GetHashCode();
                    if (Age != null)
                    hashCode = hashCode * 59 + Age.GetHashCode();
                    if (DateOfBirth != null)
                    hashCode = hashCode * 59 + DateOfBirth.GetHashCode();
                    if (IsPartOfLitter != null)
                    hashCode = hashCode * 59 + IsPartOfLitter.GetHashCode();
                    if (LitterId != null)
                    hashCode = hashCode * 59 + LitterId.GetHashCode();
                    if (MedicalHistoryId != null)
                    hashCode = hashCode * 59 + MedicalHistoryId.GetHashCode();
                    if (KennelId != null)
                    hashCode = hashCode * 59 + KennelId.GetHashCode();
                    if (Bio != null)
                    hashCode = hashCode * 59 + Bio.GetHashCode();
                    if (Photos != null)
                    hashCode = hashCode * 59 + Photos.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AnimalInfo left, AnimalInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AnimalInfo left, AnimalInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
