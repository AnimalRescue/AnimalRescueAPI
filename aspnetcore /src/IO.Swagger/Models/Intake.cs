/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Aggregate representing an animal being registered into the Rescue
    /// </summary>
    [DataContract]
    public partial class Intake :  IEquatable<Intake>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        public IntakeId Id { get; set; }

        /// <summary>
        /// Gets or Sets ParNumber
        /// </summary>
        [Required]
        [DataMember(Name="parNumber")]
        public ParNumber ParNumber { get; set; }

        /// <summary>
        /// Gets or Sets AnimalInfoId
        /// </summary>
        [DataMember(Name="animalInfoId")]
        public AnimalId AnimalInfoId { get; set; }

        /// <summary>
        /// Gets or Sets DateOfIntake
        /// </summary>
        [Required]
        [DataMember(Name="dateOfIntake")]
        public DateTime? DateOfIntake { get; set; }
        /// <summary>
        /// Gets or Sets TypeOfIntake
        /// </summary>
        public enum IntakeType
        { 
            /// <summary>
            /// Enum OwnerSurrenderEnum for "Owner Surrender"
            /// </summary>
            [EnumMember(Value = "Owner Surrender")]
            OwnerSurrenderEnum = 1,
            
            /// <summary>
            /// Enum FailedAdoptionEnum for "Failed Adoption"
            /// </summary>
            [EnumMember(Value = "Failed Adoption")]
            FailedAdoptionEnum = 2,
            
            /// <summary>
            /// Enum StraySurrenderEnum for "Stray Surrender"
            /// </summary>
            [EnumMember(Value = "Stray Surrender")]
            StraySurrenderEnum = 3,
            
            /// <summary>
            /// Enum AbandondedAtRescueEnum for "Abandonded at Rescue"
            /// </summary>
            [EnumMember(Value = "Abandonded at Rescue")]
            AbandondedAtRescueEnum = 4,
            
            /// <summary>
            /// Enum ShelterTransferEnum for "Shelter Transfer"
            /// </summary>
            [EnumMember(Value = "Shelter Transfer")]
            ShelterTransferEnum = 5
        }

        /// <summary>
        /// Gets or Sets TypeOfIntake
        /// </summary>
        [Required]
        [DataMember(Name="typeOfIntake")]
        public IntakeType? TypeOfIntake { get; set; }

        /// <summary>
        /// Gets or Sets SurrendingPartyId
        /// </summary>
        [DataMember(Name="surrendingPartyId")]
        public ContactId SurrendingPartyId { get; set; }

        /// <summary>
        /// Gets or Sets TransferringShelterId
        /// </summary>
        [DataMember(Name="transferringShelterId")]
        public OrganizationId TransferringShelterId { get; set; }

        /// <summary>
        /// Gets or Sets PlaceInIsolation
        /// </summary>
        [Required]
        [DataMember(Name="placeInIsolation")]
        public bool? PlaceInIsolation { get; set; }

        /// <summary>
        /// Gets or Sets StaffId
        /// </summary>
        [DataMember(Name="staffId")]
        public ContactId StaffId { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes")]
        public List<NoteId> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Intake {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParNumber: ").Append(ParNumber).Append("\n");
            sb.Append("  AnimalInfoId: ").Append(AnimalInfoId).Append("\n");
            sb.Append("  DateOfIntake: ").Append(DateOfIntake).Append("\n");
            sb.Append("  TypeOfIntake: ").Append(TypeOfIntake).Append("\n");
            sb.Append("  SurrendingPartyId: ").Append(SurrendingPartyId).Append("\n");
            sb.Append("  TransferringShelterId: ").Append(TransferringShelterId).Append("\n");
            sb.Append("  PlaceInIsolation: ").Append(PlaceInIsolation).Append("\n");
            sb.Append("  StaffId: ").Append(StaffId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Intake)obj);
        }

        /// <summary>
        /// Returns true if Intake instances are equal
        /// </summary>
        /// <param name="other">Instance of Intake to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Intake other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ParNumber == other.ParNumber ||
                    ParNumber != null &&
                    ParNumber.Equals(other.ParNumber)
                ) && 
                (
                    AnimalInfoId == other.AnimalInfoId ||
                    AnimalInfoId != null &&
                    AnimalInfoId.Equals(other.AnimalInfoId)
                ) && 
                (
                    DateOfIntake == other.DateOfIntake ||
                    DateOfIntake != null &&
                    DateOfIntake.Equals(other.DateOfIntake)
                ) && 
                (
                    TypeOfIntake == other.TypeOfIntake ||
                    TypeOfIntake != null &&
                    TypeOfIntake.Equals(other.TypeOfIntake)
                ) && 
                (
                    SurrendingPartyId == other.SurrendingPartyId ||
                    SurrendingPartyId != null &&
                    SurrendingPartyId.Equals(other.SurrendingPartyId)
                ) && 
                (
                    TransferringShelterId == other.TransferringShelterId ||
                    TransferringShelterId != null &&
                    TransferringShelterId.Equals(other.TransferringShelterId)
                ) && 
                (
                    PlaceInIsolation == other.PlaceInIsolation ||
                    PlaceInIsolation != null &&
                    PlaceInIsolation.Equals(other.PlaceInIsolation)
                ) && 
                (
                    StaffId == other.StaffId ||
                    StaffId != null &&
                    StaffId.Equals(other.StaffId)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ParNumber != null)
                    hashCode = hashCode * 59 + ParNumber.GetHashCode();
                    if (AnimalInfoId != null)
                    hashCode = hashCode * 59 + AnimalInfoId.GetHashCode();
                    if (DateOfIntake != null)
                    hashCode = hashCode * 59 + DateOfIntake.GetHashCode();
                    if (TypeOfIntake != null)
                    hashCode = hashCode * 59 + TypeOfIntake.GetHashCode();
                    if (SurrendingPartyId != null)
                    hashCode = hashCode * 59 + SurrendingPartyId.GetHashCode();
                    if (TransferringShelterId != null)
                    hashCode = hashCode * 59 + TransferringShelterId.GetHashCode();
                    if (PlaceInIsolation != null)
                    hashCode = hashCode * 59 + PlaceInIsolation.GetHashCode();
                    if (StaffId != null)
                    hashCode = hashCode * 59 + StaffId.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Intake left, Intake right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Intake left, Intake right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
