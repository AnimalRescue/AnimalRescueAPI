/*
 * Animal Rescue API
 *
 * AnimalRescue CQRS API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DogInfo :  IEquatable<DogInfo>
    {         /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        public enum DogBreeds
        { 
            /// <summary>
            /// Enum UndeterminedEnum for "Undetermined"
            /// </summary>
            [EnumMember(Value = "Undetermined")]
            UndeterminedEnum = 1,
            
            /// <summary>
            /// Enum AkitaEnum for "Akita"
            /// </summary>
            [EnumMember(Value = "Akita")]
            AkitaEnum = 2,
            
            /// <summary>
            /// Enum AmericanBulldogEnum for "American Bulldog"
            /// </summary>
            [EnumMember(Value = "American Bulldog")]
            AmericanBulldogEnum = 3,
            
            /// <summary>
            /// Enum AmericanEskimoDogEnum for "American Eskimo Dog"
            /// </summary>
            [EnumMember(Value = "American Eskimo Dog")]
            AmericanEskimoDogEnum = 4,
            
            /// <summary>
            /// Enum AustralianCattleDogEnum for "Australian Cattle Dog"
            /// </summary>
            [EnumMember(Value = "Australian Cattle Dog")]
            AustralianCattleDogEnum = 5,
            
            /// <summary>
            /// Enum AustralianShepherdEnum for "Australian Shepherd"
            /// </summary>
            [EnumMember(Value = "Australian Shepherd")]
            AustralianShepherdEnum = 6,
            
            /// <summary>
            /// Enum BasenjiEnum for "Basenji"
            /// </summary>
            [EnumMember(Value = "Basenji")]
            BasenjiEnum = 7,
            
            /// <summary>
            /// Enum BassetHoundEnum for "Basset Hound"
            /// </summary>
            [EnumMember(Value = "Basset Hound")]
            BassetHoundEnum = 8,
            
            /// <summary>
            /// Enum BeagleEnum for "Beagle"
            /// </summary>
            [EnumMember(Value = "Beagle")]
            BeagleEnum = 9,
            
            /// <summary>
            /// Enum BerneseMountainDogEnum for "Bernese Mountain Dog"
            /// </summary>
            [EnumMember(Value = "Bernese Mountain Dog")]
            BerneseMountainDogEnum = 10,
            
            /// <summary>
            /// Enum BichonFriseEnum for "Bichon Frise"
            /// </summary>
            [EnumMember(Value = "Bichon Frise")]
            BichonFriseEnum = 11,
            
            /// <summary>
            /// Enum BloodhoundEnum for "Bloodhound"
            /// </summary>
            [EnumMember(Value = "Bloodhound")]
            BloodhoundEnum = 12,
            
            /// <summary>
            /// Enum BorderCollieEnum for "Border Collie"
            /// </summary>
            [EnumMember(Value = "Border Collie")]
            BorderCollieEnum = 13,
            
            /// <summary>
            /// Enum BostonTerrierEnum for "Boston Terrier"
            /// </summary>
            [EnumMember(Value = "Boston Terrier")]
            BostonTerrierEnum = 14,
            
            /// <summary>
            /// Enum BoxerScottishEnum for "Boxer Scottish"
            /// </summary>
            [EnumMember(Value = "Boxer Scottish")]
            BoxerScottishEnum = 15,
            
            /// <summary>
            /// Enum BrittanySpanielEnum for "Brittany Spaniel"
            /// </summary>
            [EnumMember(Value = "Brittany Spaniel")]
            BrittanySpanielEnum = 16,
            
            /// <summary>
            /// Enum BullTerrierEnum for "Bull Terrier"
            /// </summary>
            [EnumMember(Value = "Bull Terrier")]
            BullTerrierEnum = 17,
            
            /// <summary>
            /// Enum BulldogEnum for "Bulldog"
            /// </summary>
            [EnumMember(Value = "Bulldog")]
            BulldogEnum = 18,
            
            /// <summary>
            /// Enum BullmastiffEnum for "Bullmastiff"
            /// </summary>
            [EnumMember(Value = "Bullmastiff")]
            BullmastiffEnum = 19,
            
            /// <summary>
            /// Enum CatahoulaLeopardDogEnum for "Catahoula Leopard Dog"
            /// </summary>
            [EnumMember(Value = "Catahoula Leopard Dog")]
            CatahoulaLeopardDogEnum = 20,
            
            /// <summary>
            /// Enum CavalierKingCharlesSpanielEnum for "Cavalier King Charles Spaniel"
            /// </summary>
            [EnumMember(Value = "Cavalier King Charles Spaniel")]
            CavalierKingCharlesSpanielEnum = 21,
            
            /// <summary>
            /// Enum ChihuahuaEnum for "Chihuahua"
            /// </summary>
            [EnumMember(Value = "Chihuahua")]
            ChihuahuaEnum = 22,
            
            /// <summary>
            /// Enum ChineseCrestedEnum for "Chinese Crested"
            /// </summary>
            [EnumMember(Value = "Chinese Crested")]
            ChineseCrestedEnum = 23,
            
            /// <summary>
            /// Enum ChowChowEnum for "Chow Chow"
            /// </summary>
            [EnumMember(Value = "Chow Chow")]
            ChowChowEnum = 24,
            
            /// <summary>
            /// Enum CockapooEnum for "Cockapoo"
            /// </summary>
            [EnumMember(Value = "Cockapoo")]
            CockapooEnum = 25,
            
            /// <summary>
            /// Enum CockerSpanielEnum for "Cocker Spaniel"
            /// </summary>
            [EnumMember(Value = "Cocker Spaniel")]
            CockerSpanielEnum = 26,
            
            /// <summary>
            /// Enum CollieEnum for "Collie"
            /// </summary>
            [EnumMember(Value = "Collie")]
            CollieEnum = 27,
            
            /// <summary>
            /// Enum DalmatianEnum for "Dalmatian"
            /// </summary>
            [EnumMember(Value = "Dalmatian")]
            DalmatianEnum = 28,
            
            /// <summary>
            /// Enum DashshundEnum for "Dashshund"
            /// </summary>
            [EnumMember(Value = "Dashshund")]
            DashshundEnum = 29,
            
            /// <summary>
            /// Enum DobermanPinscherEnum for "Doberman Pinscher"
            /// </summary>
            [EnumMember(Value = "Doberman Pinscher")]
            DobermanPinscherEnum = 30,
            
            /// <summary>
            /// Enum EnglishSetterEnum for "English Setter"
            /// </summary>
            [EnumMember(Value = "English Setter")]
            EnglishSetterEnum = 31,
            
            /// <summary>
            /// Enum FlatCoatedRetrieverEnum for "Flat-Coated Retriever"
            /// </summary>
            [EnumMember(Value = "Flat-Coated Retriever")]
            FlatCoatedRetrieverEnum = 32,
            
            /// <summary>
            /// Enum FoxTerrierEnum for "Fox Terrier"
            /// </summary>
            [EnumMember(Value = "Fox Terrier")]
            FoxTerrierEnum = 33,
            
            /// <summary>
            /// Enum FrenchBulldogEnum for "French Bulldog"
            /// </summary>
            [EnumMember(Value = "French Bulldog")]
            FrenchBulldogEnum = 34,
            
            /// <summary>
            /// Enum GermanShepherdEnum for "German Shepherd"
            /// </summary>
            [EnumMember(Value = "German Shepherd")]
            GermanShepherdEnum = 35,
            
            /// <summary>
            /// Enum GermanShorthairedPointerEnum for "German Shorthaired Pointer"
            /// </summary>
            [EnumMember(Value = "German Shorthaired Pointer")]
            GermanShorthairedPointerEnum = 36,
            
            /// <summary>
            /// Enum GoldenRetrieverEnum for "Golden Retriever"
            /// </summary>
            [EnumMember(Value = "Golden Retriever")]
            GoldenRetrieverEnum = 37,
            
            /// <summary>
            /// Enum GoldendoodleEnum for "Goldendoodle"
            /// </summary>
            [EnumMember(Value = "Goldendoodle")]
            GoldendoodleEnum = 38,
            
            /// <summary>
            /// Enum GreatDaneEnum for "Great Dane"
            /// </summary>
            [EnumMember(Value = "Great Dane")]
            GreatDaneEnum = 39,
            
            /// <summary>
            /// Enum GreatPyreneesEnum for "Great Pyrenees"
            /// </summary>
            [EnumMember(Value = "Great Pyrenees")]
            GreatPyreneesEnum = 40,
            
            /// <summary>
            /// Enum GreyhoundEnum for "Greyhound"
            /// </summary>
            [EnumMember(Value = "Greyhound")]
            GreyhoundEnum = 41,
            
            /// <summary>
            /// Enum HavaneseEnum for "Havanese"
            /// </summary>
            [EnumMember(Value = "Havanese")]
            HavaneseEnum = 42,
            
            /// <summary>
            /// Enum IrishSetterEnum for "Irish Setter"
            /// </summary>
            [EnumMember(Value = "Irish Setter")]
            IrishSetterEnum = 43,
            
            /// <summary>
            /// Enum JackRussellTerrierEnum for "Jack Russell Terrier"
            /// </summary>
            [EnumMember(Value = "Jack Russell Terrier")]
            JackRussellTerrierEnum = 44,
            
            /// <summary>
            /// Enum LabradoodleEnum for "Labradoodle"
            /// </summary>
            [EnumMember(Value = "Labradoodle")]
            LabradoodleEnum = 45
        }

        /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        [Required]
        [DataMember(Name="breed")]
        public DogBreeds? Breed { get; set; }
        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        public enum DogColors
        { 
            /// <summary>
            /// Enum BlackEnum for "Black"
            /// </summary>
            [EnumMember(Value = "Black")]
            BlackEnum = 1,
            
            /// <summary>
            /// Enum BlackAndWhiteEnum for "Black and White"
            /// </summary>
            [EnumMember(Value = "Black and White")]
            BlackAndWhiteEnum = 2,
            
            /// <summary>
            /// Enum WhiteEnum for "White"
            /// </summary>
            [EnumMember(Value = "White")]
            WhiteEnum = 3,
            
            /// <summary>
            /// Enum BrindleEnum for "Brindle"
            /// </summary>
            [EnumMember(Value = "Brindle")]
            BrindleEnum = 4,
            
            /// <summary>
            /// Enum TriColorEnum for "Tri-Color"
            /// </summary>
            [EnumMember(Value = "Tri-Color")]
            TriColorEnum = 5,
            
            /// <summary>
            /// Enum BrownEnum for "Brown"
            /// </summary>
            [EnumMember(Value = "Brown")]
            BrownEnum = 6,
            
            /// <summary>
            /// Enum BrownAndWhiteEnum for "Brown and White"
            /// </summary>
            [EnumMember(Value = "Brown and White")]
            BrownAndWhiteEnum = 7,
            
            /// <summary>
            /// Enum GrayBlueEnum for "Gray/Blue"
            /// </summary>
            [EnumMember(Value = "Gray/Blue")]
            GrayBlueEnum = 8,
            
            /// <summary>
            /// Enum GrayAndWhiteEnum for "Gray and White"
            /// </summary>
            [EnumMember(Value = "Gray and White")]
            GrayAndWhiteEnum = 9,
            
            /// <summary>
            /// Enum RedCinnamonEnum for "Red/Cinnamon"
            /// </summary>
            [EnumMember(Value = "Red/Cinnamon")]
            RedCinnamonEnum = 10,
            
            /// <summary>
            /// Enum BlackAndTanEnum for "Black and Tan"
            /// </summary>
            [EnumMember(Value = "Black and Tan")]
            BlackAndTanEnum = 11,
            
            /// <summary>
            /// Enum TanEnum for "Tan"
            /// </summary>
            [EnumMember(Value = "Tan")]
            TanEnum = 12,
            
            /// <summary>
            /// Enum TanAndWhiteEnum for "Tan and White"
            /// </summary>
            [EnumMember(Value = "Tan and White")]
            TanAndWhiteEnum = 13
        }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [Required]
        [DataMember(Name="color")]
        public DogColors? Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DogInfo {\n");
            sb.Append("  Breed: ").Append(Breed).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DogInfo)obj);
        }

        /// <summary>
        /// Returns true if DogInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DogInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DogInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Breed == other.Breed ||
                    Breed != null &&
                    Breed.Equals(other.Breed)
                ) && 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Breed != null)
                    hashCode = hashCode * 59 + Breed.GetHashCode();
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DogInfo left, DogInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DogInfo left, DogInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
