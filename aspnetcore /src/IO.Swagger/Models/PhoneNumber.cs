/*
 * Animal Rescue API
 *
 * AnimalRescue CQRS API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PhoneNumber :  IEquatable<PhoneNumber>
    { 
        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [Required]
        [DataMember(Name="number")]
        public int? Number { get; set; }
        /// <summary>
        /// Gets or Sets PhoneType
        /// </summary>
        public enum PhoneNumberType
        { 
            /// <summary>
            /// Enum HomeEnum for "Home"
            /// </summary>
            [EnumMember(Value = "Home")]
            HomeEnum = 1,
            
            /// <summary>
            /// Enum WorkEnum for "Work"
            /// </summary>
            [EnumMember(Value = "Work")]
            WorkEnum = 2,
            
            /// <summary>
            /// Enum MobileEnum for "Mobile"
            /// </summary>
            [EnumMember(Value = "Mobile")]
            MobileEnum = 3,
            
            /// <summary>
            /// Enum FaxEnum for "Fax"
            /// </summary>
            [EnumMember(Value = "Fax")]
            FaxEnum = 4,
            
            /// <summary>
            /// Enum CustomEnum for "Custom"
            /// </summary>
            [EnumMember(Value = "Custom")]
            CustomEnum = 5
        }

        /// <summary>
        /// Gets or Sets PhoneType
        /// </summary>
        [DataMember(Name="phoneType")]
        public PhoneNumberType? PhoneType { get; set; }
        /// <summary>
        /// Gets or Sets PhonePurpose
        /// </summary>
        public enum PhoneNumberPurpose
        { 
            /// <summary>
            /// Enum PrimaryEnum for "Primary"
            /// </summary>
            [EnumMember(Value = "Primary")]
            PrimaryEnum = 1,
            
            /// <summary>
            /// Enum AlternateEnum for "Alternate"
            /// </summary>
            [EnumMember(Value = "Alternate")]
            AlternateEnum = 2,
            
            /// <summary>
            /// Enum NotificationEnum for "Notification"
            /// </summary>
            [EnumMember(Value = "Notification")]
            NotificationEnum = 3
        }

        /// <summary>
        /// Gets or Sets PhonePurpose
        /// </summary>
        [DataMember(Name="phonePurpose")]
        public PhoneNumberPurpose? PhonePurpose { get; set; }

        /// <summary>
        /// Gets or Sets NoteId
        /// </summary>
        [DataMember(Name="noteId")]
        public NoteId NoteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneNumber {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("  PhonePurpose: ").Append(PhonePurpose).Append("\n");
            sb.Append("  NoteId: ").Append(NoteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PhoneNumber)obj);
        }

        /// <summary>
        /// Returns true if PhoneNumber instances are equal
        /// </summary>
        /// <param name="other">Instance of PhoneNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneNumber other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    PhoneType == other.PhoneType ||
                    PhoneType != null &&
                    PhoneType.Equals(other.PhoneType)
                ) && 
                (
                    PhonePurpose == other.PhonePurpose ||
                    PhonePurpose != null &&
                    PhonePurpose.Equals(other.PhonePurpose)
                ) && 
                (
                    NoteId == other.NoteId ||
                    NoteId != null &&
                    NoteId.Equals(other.NoteId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (PhoneType != null)
                    hashCode = hashCode * 59 + PhoneType.GetHashCode();
                    if (PhonePurpose != null)
                    hashCode = hashCode * 59 + PhonePurpose.GetHashCode();
                    if (NoteId != null)
                    hashCode = hashCode * 59 + NoteId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PhoneNumber left, PhoneNumber right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PhoneNumber left, PhoneNumber right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
