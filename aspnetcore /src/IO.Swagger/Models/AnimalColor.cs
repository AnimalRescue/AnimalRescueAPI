/*
 * Animal Rescue API
 *
 * AnimalRescue CQRS API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AnimalColor :  IEquatable<AnimalColor>
    {         /// <summary>
        /// Gets or Sets CatColor
        /// </summary>
        public enum CatColors
        { 
            /// <summary>
            /// Enum WhiteEnum for "White"
            /// </summary>
            [EnumMember(Value = "White")]
            WhiteEnum = 1,
            
            /// <summary>
            /// Enum BlackEnum for "Black"
            /// </summary>
            [EnumMember(Value = "Black")]
            BlackEnum = 2,
            
            /// <summary>
            /// Enum BlackAndWhiteEnum for "Black and White"
            /// </summary>
            [EnumMember(Value = "Black and White")]
            BlackAndWhiteEnum = 3,
            
            /// <summary>
            /// Enum BrownEnum for "Brown"
            /// </summary>
            [EnumMember(Value = "Brown")]
            BrownEnum = 4,
            
            /// <summary>
            /// Enum BrownTabbyEnum for "Brown Tabby"
            /// </summary>
            [EnumMember(Value = "Brown Tabby")]
            BrownTabbyEnum = 5,
            
            /// <summary>
            /// Enum BrownAndWhiteEnum for "Brown and White"
            /// </summary>
            [EnumMember(Value = "Brown and White")]
            BrownAndWhiteEnum = 6,
            
            /// <summary>
            /// Enum BuffEnum for "Buff"
            /// </summary>
            [EnumMember(Value = "Buff")]
            BuffEnum = 7,
            
            /// <summary>
            /// Enum BuffAndWhiteEnum for "Buff and White"
            /// </summary>
            [EnumMember(Value = "Buff and White")]
            BuffAndWhiteEnum = 8,
            
            /// <summary>
            /// Enum BuffTabbyEnum for "Buff Tabby"
            /// </summary>
            [EnumMember(Value = "Buff Tabby")]
            BuffTabbyEnum = 9,
            
            /// <summary>
            /// Enum CalicoEnum for "Calico"
            /// </summary>
            [EnumMember(Value = "Calico")]
            CalicoEnum = 10,
            
            /// <summary>
            /// Enum DiluteCalicoEnum for "Dilute Calico"
            /// </summary>
            [EnumMember(Value = "Dilute Calico")]
            DiluteCalicoEnum = 11,
            
            /// <summary>
            /// Enum FlamePointEnum for "Flame Point"
            /// </summary>
            [EnumMember(Value = "Flame Point")]
            FlamePointEnum = 12,
            
            /// <summary>
            /// Enum GrayEnum for "Gray"
            /// </summary>
            [EnumMember(Value = "Gray")]
            GrayEnum = 13,
            
            /// <summary>
            /// Enum GrayAndWhiteEnum for "Gray and White"
            /// </summary>
            [EnumMember(Value = "Gray and White")]
            GrayAndWhiteEnum = 14,
            
            /// <summary>
            /// Enum GrayTabbyEnum for "Gray Tabby"
            /// </summary>
            [EnumMember(Value = "Gray Tabby")]
            GrayTabbyEnum = 15,
            
            /// <summary>
            /// Enum LavendarLilacPointEnum for "Lavendar/Lilac Point"
            /// </summary>
            [EnumMember(Value = "Lavendar/Lilac Point")]
            LavendarLilacPointEnum = 16,
            
            /// <summary>
            /// Enum OrangeTabbyEnum for "Orange Tabby"
            /// </summary>
            [EnumMember(Value = "Orange Tabby")]
            OrangeTabbyEnum = 17,
            
            /// <summary>
            /// Enum OrangeAndWhiteEnum for "Orange and White"
            /// </summary>
            [EnumMember(Value = "Orange and White")]
            OrangeAndWhiteEnum = 18,
            
            /// <summary>
            /// Enum SealPointEnum for "Seal Point"
            /// </summary>
            [EnumMember(Value = "Seal Point")]
            SealPointEnum = 19,
            
            /// <summary>
            /// Enum SilverEnum for "Silver"
            /// </summary>
            [EnumMember(Value = "Silver")]
            SilverEnum = 20,
            
            /// <summary>
            /// Enum SilverAndWhiteEnum for "Silver and White"
            /// </summary>
            [EnumMember(Value = "Silver and White")]
            SilverAndWhiteEnum = 21,
            
            /// <summary>
            /// Enum SilverTabbyEnum for "Silver Tabby"
            /// </summary>
            [EnumMember(Value = "Silver Tabby")]
            SilverTabbyEnum = 22,
            
            /// <summary>
            /// Enum SnowshoeEnum for "Snowshoe"
            /// </summary>
            [EnumMember(Value = "Snowshoe")]
            SnowshoeEnum = 23,
            
            /// <summary>
            /// Enum TortieEnum for "Tortie"
            /// </summary>
            [EnumMember(Value = "Tortie")]
            TortieEnum = 24
        }

        /// <summary>
        /// Gets or Sets CatColor
        /// </summary>
        [DataMember(Name="catColor")]
        public CatColors? CatColor { get; set; }
        /// <summary>
        /// Gets or Sets DogColor
        /// </summary>
        public enum DogColors
        { 
            /// <summary>
            /// Enum BlackEnum for "Black"
            /// </summary>
            [EnumMember(Value = "Black")]
            BlackEnum = 1,
            
            /// <summary>
            /// Enum BlackAndWhiteEnum for "Black and White"
            /// </summary>
            [EnumMember(Value = "Black and White")]
            BlackAndWhiteEnum = 2,
            
            /// <summary>
            /// Enum WhiteEnum for "White"
            /// </summary>
            [EnumMember(Value = "White")]
            WhiteEnum = 3,
            
            /// <summary>
            /// Enum BrindleEnum for "Brindle"
            /// </summary>
            [EnumMember(Value = "Brindle")]
            BrindleEnum = 4,
            
            /// <summary>
            /// Enum TriColorEnum for "Tri-Color"
            /// </summary>
            [EnumMember(Value = "Tri-Color")]
            TriColorEnum = 5,
            
            /// <summary>
            /// Enum BrownEnum for "Brown"
            /// </summary>
            [EnumMember(Value = "Brown")]
            BrownEnum = 6,
            
            /// <summary>
            /// Enum BrownAndWhiteEnum for "Brown and White"
            /// </summary>
            [EnumMember(Value = "Brown and White")]
            BrownAndWhiteEnum = 7,
            
            /// <summary>
            /// Enum GrayBlueEnum for "Gray/Blue"
            /// </summary>
            [EnumMember(Value = "Gray/Blue")]
            GrayBlueEnum = 8,
            
            /// <summary>
            /// Enum GrayAndWhiteEnum for "Gray and White"
            /// </summary>
            [EnumMember(Value = "Gray and White")]
            GrayAndWhiteEnum = 9,
            
            /// <summary>
            /// Enum RedCinnamonEnum for "Red/Cinnamon"
            /// </summary>
            [EnumMember(Value = "Red/Cinnamon")]
            RedCinnamonEnum = 10,
            
            /// <summary>
            /// Enum BlackAndTanEnum for "Black and Tan"
            /// </summary>
            [EnumMember(Value = "Black and Tan")]
            BlackAndTanEnum = 11,
            
            /// <summary>
            /// Enum TanEnum for "Tan"
            /// </summary>
            [EnumMember(Value = "Tan")]
            TanEnum = 12,
            
            /// <summary>
            /// Enum TanAndWhiteEnum for "Tan and White"
            /// </summary>
            [EnumMember(Value = "Tan and White")]
            TanAndWhiteEnum = 13
        }

        /// <summary>
        /// Gets or Sets DogColor
        /// </summary>
        [DataMember(Name="dogColor")]
        public DogColors? DogColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnimalColor {\n");
            sb.Append("  CatColor: ").Append(CatColor).Append("\n");
            sb.Append("  DogColor: ").Append(DogColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AnimalColor)obj);
        }

        /// <summary>
        /// Returns true if AnimalColor instances are equal
        /// </summary>
        /// <param name="other">Instance of AnimalColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnimalColor other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CatColor == other.CatColor ||
                    CatColor != null &&
                    CatColor.Equals(other.CatColor)
                ) && 
                (
                    DogColor == other.DogColor ||
                    DogColor != null &&
                    DogColor.Equals(other.DogColor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CatColor != null)
                    hashCode = hashCode * 59 + CatColor.GetHashCode();
                    if (DogColor != null)
                    hashCode = hashCode * 59 + DogColor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AnimalColor left, AnimalColor right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AnimalColor left, AnimalColor right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
